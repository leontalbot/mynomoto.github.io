(page "index.html"
  (:require
    [blog.markdown-editor :as md-e]
    [blog.db :as db]
    [clojure.string :as str]
    [blog.route :as r]
    [blog.vega :as b-v]
    [hoplon.vega :as vega]
    [hoplon.mui :as m]
    [datascript :as d]
    [hoplon.highlight :as hl]
    [cljsjs.highlight.langs.clojure]
    [hoplon.markdown :as md]))

(defn timestamps [created-at updated-at]
  (span :css {:color "grey"}
    (str "Original date: " created-at (when-let [update (first updated-at)] (str " / Last updated: " update)))))

(defn render [[tag s]]
  (case tag
    :md (md/to-html div s)
    :code (hl/highlight s)))

(defn post [{:keys [title content created-at updated-at] :as m}]
  [(h1 title)
   (timestamps created-at updated-at)
   (m/panel
     (map render content))])

(defn post-link [[title date permalink]]
  (div :class "mui-text-title"
    (a :href (str "#/blog/" permalink)
      (str date ": " title))))

(defn list-posts [conn]
  [(h1 "Posts:")
   (m/panel
     (map post-link (sort-by second > (db/post-list conn))))])

(html
  (head
    (link :href "blog.css" :rel "stylesheet"))
  (body
    (m/appbar
      (td :class "mui-appbar-height"
        (div :class "mui-text-headline mui-text-accent"
          :css {:cursor "pointer"}
          :click #(set! (.. js/window -location -hash) "#/blog")
          "mynomoto's experiments")))
    (div
      :class "mui-container"
      :css {:display "none"}
      :toggle (cell= (= r/main-hash "chart"))
      (h1
        :click #(swap! b-v/dataset (fn [data]
                                     (mapv (fn [d]
                                             (update-in d [:y] inc))
                                       data)))
        "Sample chart")
      (input
        :css {:width "400px"}
        :type "range" :min 1 :max 1101 :step 5
        :value b-v/width
        :input #(reset! b-v/width @%))
      (input
        :css {:width "400px"}
        :type "range" :min 1 :max 401 :step 5
        :value b-v/height
        :input #(reset! b-v/height @%))
      (vega/chart b-v/json-spec))
    (md-e/live-editor
      (cell (or (db/retrieve "mynomoto/md-editor")
                md-e/sample-content))
      r/main-hash)

    (div
      :class "mui-container"
      :css {:display "none"}
      :toggle (cell= (= r/main-hash "blog"))
      (cell= (if (str/blank? r/permalink)
               (list-posts db/conn)
               (post (db/current-post r/permalink db/conn)))))))
